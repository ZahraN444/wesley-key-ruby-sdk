# swagger_petstore
#
# This file was automatically generated by APIMATIC v3.0
# ( https://www.apimatic.io ).

module SwaggerPetstore
  # UserController
  class UserController < BaseController
    # Creates list of users with given input array
    # @param [Array[User]] body Required parameter: List of user object
    # @return [void] Response from the API call.
    def create_users_with_list_input(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/user/createWithList',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end))
        .response(new_response_handler
                    .is_response_void(true))
        .execute
    end

    # Get user by user name
    # @param [String] username Required parameter: The name that needs to be
    # fetched. Use user1 for testing.
    # @return [User] Response from the API call.
    def get_user_by_name(username)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/user/{username}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(username, key: 'username')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(User.method(:from_hash))
                    .local_error('400',
                                 'Invalid username supplied',
                                 APIException)
                    .local_error('404',
                                 'User not found',
                                 APIException))
        .execute
    end

    # This can only be done by the logged in user.
    # @param [String] username Required parameter: name that need to be
    # updated
    # @param [UserRequest] body Required parameter: Updated user object
    # @return [void] Response from the API call.
    def update_user(username,
                    body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/user/{username}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(username, key: 'username')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Invalid user supplied',
                                 APIException)
                    .local_error('404',
                                 'User not found',
                                 APIException))
        .execute
    end

    # This can only be done by the logged in user.
    # @param [String] username Required parameter: The name that needs to be
    # deleted
    # @return [void] Response from the API call.
    def delete_user(username)
      @api_call
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/user/{username}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(username, key: 'username')
                                    .should_encode(true)))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('400',
                                 'Invalid username supplied',
                                 APIException)
                    .local_error('404',
                                 'User not found',
                                 APIException))
        .execute
    end

    # Logs out current logged in user session
    # @return [void] Response from the API call.
    def logout_user
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/user/logout',
                                     Server::DEFAULT))
        .response(new_response_handler
                    .is_response_void(true))
        .execute
    end

    # This can only be done by the logged in user.
    # @param [UserRequest] body Required parameter: Created user object
    # @return [void] Response from the API call.
    def create_user(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/user',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end))
        .response(new_response_handler
                    .is_response_void(true))
        .execute
    end

    # Creates list of users with given input array
    # @param [Array[User]] body Required parameter: List of user object
    # @return [void] Response from the API call.
    def create_users_with_array_input(body)
      @api_call
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/user/createWithArray',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end))
        .response(new_response_handler
                    .is_response_void(true))
        .execute
    end

    # Logs user into the system
    # @param [String] username Required parameter: The user name for login
    # @param [String] password Required parameter: The password for login in
    # clear text
    # @return [String] Response from the API call.
    def login_user(username,
                   password)
      @api_call
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/user/login',
                                     Server::DEFAULT)
                   .query_param(new_parameter(username, key: 'username'))
                   .query_param(new_parameter(password, key: 'password')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:deserialize_primitive_types))
                    .deserialize_into(proc do |response| response&.to_s end)
                    .is_primitive_response(true)
                    .local_error('400',
                                 'Invalid username/password supplied',
                                 APIException))
        .execute
    end
  end
end
